/** * <p>Title: DateUtil.java</p> * <p>Description: </p> * <p>Copyright: Copyright (c) </p> * <p>Company: adwalker</p> * @author jiangwei * @date Aug 25, 2012 * @version 1.0 */package cn.adwalker.core.util;/** * <p>Title: DateUtil</p> * <p>Description: </p> * <p>Company: adwalker</p>  * @author    jiangwei * @date       Aug 25, 2012 */import java.sql.Timestamp;import java.text.ParseException;import java.text.ParsePosition;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.Locale;import org.apache.commons.lang.StringUtils;import org.apache.commons.lang.time.DateUtils;import org.apache.log4j.Logger;/** * 日期处理工具类. */public class DateUtil extends DateUtils {	private static Logger logger = Logger.getLogger(DateUtil.class);	private static Calendar cal = Calendar.getInstance();	/**	 * 缺省的日期格式	 */	public static final String DAFAULT_DATE_FORMAT = "yyyy-MM-dd";	/**	 * 时间样式 yyyy-MM-dd HH:mm:ss	 */	public static final String PARTTERN_DATE_TIME = "yyyy-MM-dd HH:mm:ss";	/**	 * 默认日期类型格试.	 * 	 * @see DAFAULT_DATE_FORMAT	 */	private static SimpleDateFormat dateFormat = new SimpleDateFormat(			DAFAULT_DATE_FORMAT);	/**	 * 缺省的日期时间格式	 */	private static final String DAFAULT_DATETIME_FORMAT = "yyyy-M-d HH:mm:ss";	/**	 * 时间格式	 */	private static String DATETIME_FORMAT = DAFAULT_DATETIME_FORMAT;	private static SimpleDateFormat datetimeFormat = new SimpleDateFormat(			DATETIME_FORMAT);	/**	 * 缺省的时间格式	 */	private static final String DAFAULT_TIME_FORMAT = "HH:mm:ss";	/**	 * 获取昨天日期yyyy-MM-dd	 * 	 * @return	 * @throws Exception	 */	public static String getYesterday() throws Exception {		Calendar cal = Calendar.getInstance();		cal.add(Calendar.DATE, -1);		String yesterday = new SimpleDateFormat("yyyy-MM-dd").format(cal				.getTime());		return yesterday;	}	/**	 * 得到一天的开始时间	 * 	 * @param d	 * @return	 */	public static Timestamp getDayStart(Date d) {		Calendar c = Calendar.getInstance();		c.setTime(d);		c.set(Calendar.HOUR_OF_DAY, 0);		c.set(Calendar.MINUTE, 0);		c.set(Calendar.SECOND, 0);		c.set(Calendar.MILLISECOND, 0);		return new Timestamp(c.getTimeInMillis());	}	/**	 * 比较日期	 * 	 * @param d1	 * @param d2	 * @return	 */	public static boolean compare(Date d1, Date d2) {		Calendar c1 = Calendar.getInstance();		Calendar c2 = Calendar.getInstance();		c1.setTime(d1);		c2.setTime(d2);		return c1.getTimeInMillis() > c2.getTimeInMillis();	}	public static Date max(Date d1, Date d2) {		Calendar c1 = Calendar.getInstance();		Calendar c2 = Calendar.getInstance();		c1.setTime(d1);		c2.setTime(d2);		return (c1.getTimeInMillis() > c2.getTimeInMillis()) ? c1.getTime()				: c2.getTime();	}	public static Date min(Date d1, Date d2) {		Calendar c1 = Calendar.getInstance();		Calendar c2 = Calendar.getInstance();		c1.setTime(d1);		c2.setTime(d2);		return (c1.getTimeInMillis() < c2.getTimeInMillis()) ? c1.getTime()				: c2.getTime();	}	public static Date getTomorrow(Date d) throws Exception {		Calendar cal = Calendar.getInstance();		cal.setTime(d);		cal.add(Calendar.DATE, 1);		return new Date(cal.getTimeInMillis());	}	/**	 * 时间格式	 */	private static String TIME_FORMAT = DAFAULT_TIME_FORMAT;	private static SimpleDateFormat timeFormat = new SimpleDateFormat(			TIME_FORMAT);	private DateUtil() {		// 私用构造主法.因为此类是工具类.	}	/**	 * 	 * <p>	 * Title: getDayEnd	 * </p>	 * <p>	 * Description:转换为一天的结束时间	 * </p>	 * 	 * @param d	 * @return	 * @author cuidd	 * @date 2013-6-13	 * @return Timestamp	 * @version 1.0	 */	public static Timestamp getDayEnd(Date d) {		Calendar c = Calendar.getInstance();		c.setTime(d);		c.set(Calendar.HOUR_OF_DAY, 23);		c.set(Calendar.MINUTE, 59);		c.set(Calendar.SECOND, 59);		return new Timestamp(c.getTimeInMillis());	}	/**	 * 获取格式化实例.	 * 	 * @param pattern	 *            如果为空使用DAFAULT_DATE_FORMAT	 * @return	 */	public static SimpleDateFormat getFormatInstance(String pattern) {		if (pattern == null || pattern.length() == 0) {			pattern = DAFAULT_DATE_FORMAT;		}		return new SimpleDateFormat(pattern);	}	/**	 * 格式化Calendar	 * 	 * @param calendar	 * @return	 */	public static String formatCalendar(Calendar calendar) {		if (calendar == null) {			return "";		}		return dateFormat.format(calendar.getTime());	}	public static String formatDateTime(Date d) {		if (d == null) {			return "";		}		return datetimeFormat.format(d);	}	public static String formatDate(Date d) {		if (d == null) {			return "";		}		return dateFormat.format(d);	}	/**	 * 格式化时间	 * 	 * @param calendar	 * @return	 */	public static String formatTime(Date d) {		if (d == null) {			return "";		}		return timeFormat.format(d);	}	/**	 * 格式化整数型日期	 * 	 * @param intDate	 * @return	 */	public static String formatIntDate(Integer intDate) {		if (intDate == null) {			return "";		}		Calendar c = newCalendar(intDate);		return formatCalendar(c);	}	/**	 * 根据指定格式化来格式日期.	 * 	 * @param date	 *            待格式化的日期.	 * @param pattern	 *            格式化样式或分格,如yyMMddHHmmss	 * @return 字符串型日期.	 */	public static String formatDate(Date date, String pattern) {		if (date == null) {			return "";		}		if (StringUtils.isBlank(pattern)) {			return formatDate(date);		}		SimpleDateFormat simpleDateFormat = null;		try {			simpleDateFormat = new SimpleDateFormat(pattern);		} catch (Exception e) {			e.printStackTrace();			return formatDate(date);		}		return simpleDateFormat.format(date);	}	/**	 * 取得Integer型的当前日期	 * 	 * @return	 */	public static Integer getIntNow() {		return getIntDate(getNow());	}	/**	 * 取得Integer型的当前日期	 * 	 * @return	 */	public static Integer getIntToday() {		return getIntDate(getNow());	}	/**	 * 取得Integer型的当前年份	 * 	 * @return	 */	public static Integer getIntYearNow() {		Calendar c = Calendar.getInstance();		int year = c.get(Calendar.YEAR);		return year;	}	/**	 * 取得Integer型的当前月份	 * 	 * @return	 */	public static Integer getIntMonthNow() {		Calendar c = Calendar.getInstance();		int month = c.get(Calendar.MONTH) + 1;		return month;	}	public static String getStringToday() {		return getIntDate(getNow()) + "";	}	/**	 * 根据年月日获取整型日期	 * 	 * @param year	 * @param month	 * @param day	 * @return	 */	public static Integer getIntDate(int year, int month, int day) {		return getIntDate(newCalendar(year, month, day));	}	/**	 * 某年月的第一天	 * 	 * @param year	 * @param month	 * @return	 */	public static Integer getFirstDayOfMonth(int year, int month) {		return getIntDate(newCalendar(year, month, 1));	}	/**	 * 某年月的第一天	 * 	 * @param year	 * @param month	 * @return	 */	public static Integer getFirstDayOfThisMonth() {		Integer year = DateUtil.getIntYearNow();		Integer month = DateUtil.getIntMonthNow();		return getIntDate(newCalendar(year, month, 1));	}	/**	 * 某年月的第一天	 * 	 * @param date	 * @return	 * @time:2008-7-4 上午09:58:55	 */	public static Integer getFistDayOfMonth(Date date) {		Integer intDate = getIntDate(date);		int year = intDate / 10000;		int month = intDate % 10000 / 100;		return getIntDate(newCalendar(year, month, 1));	}	/**	 * 某年月的最后一天	 * 	 * @param year	 * @param month	 * @return	 */	public static Integer getLastDayOfMonth(int year, int month) {		return intDateSub(getIntDate(newCalendar(year, month + 1, 1)), 1);	}	/**	 * 根据Calendar获取整型年份	 * 	 * @param c	 * @return	 */	public static Integer getIntYear(Calendar c) {		int year = c.get(Calendar.YEAR);		return year;	}	public static Integer getHourOfDay() {		Calendar c = Calendar.getInstance();		return c.get(Calendar.HOUR_OF_DAY);	}	/**	 * 根据Calendar获取整型日期	 * 	 * @param c	 * @return	 */	public static Integer getIntDate(Calendar c) {		int year = c.get(Calendar.YEAR);		int month = c.get(Calendar.MONTH) + 1;		int day = c.get(Calendar.DAY_OF_MONTH);		return year * 10000 + month * 100 + day;	}	/**	 * 根据Date获取整型年份	 * 	 * @param d	 * @return	 */	public static Integer getIntYear(Date d) {		if (d == null) {			return null;		}		Calendar c = Calendar.getInstance();		c.setTime(d);		return getIntYear(c);	}	/**	 * 根据Date获取整型日期	 * 	 * @param d	 * @return	 */	public static Integer getIntDate(Date d) {		if (d == null) {			return null;		}		Calendar c = Calendar.getInstance();		c.setTime(d);		return getIntDate(c);	}	/**	 * 根据Integer获取Date日期	 * 	 * @param n	 * @return	 */	public static Date getDate(Integer n) {		if (n == null) {			return null;		}		Calendar c = Calendar.getInstance();		c.set(n / 10000, n / 100 % 100 - 1, n % 100);		return c.getTime();	}	public static Date getDate(String date) {		if (date == null || date.length() == 0) {			return null;		}		try {			if (date.contains("/")) {				date = date.replaceAll("/", "-");			}			return getFormatInstance(DAFAULT_DATE_FORMAT).parse(date);		} catch (ParseException e) {			logger.error("解析[" + date + "]错误！", e);			return null;		}	}	/**	 * 根据年份Integer获取Date日期	 * 	 * @param year	 * @return	 */	public static Date getFirstDayOfYear(Integer year) {		if (year == null) {			return null;		}		Calendar c = Calendar.getInstance();		c.set(year, 1, 1);		return c.getTime();	}	public static Date getFirstDayOfMonth(Date date) {		Calendar c = Calendar.getInstance();		c.setTime(date);		c.set(Calendar.DAY_OF_MONTH, 1);		c.set(Calendar.HOUR_OF_DAY, 0);		c.set(Calendar.MINUTE, 0);		c.set(Calendar.SECOND, 0);		return c.getTime();	}	/**	 * 根据年月日生成Calendar	 * 	 * @param year	 * @param month	 * @param day	 * @return	 */	public static Calendar newCalendar(int year, int month, int day) {		Calendar ret = Calendar.getInstance();		if (year < 100) {			year = 2000 + year;		}		ret.set(year, month - 1, day);		return ret;	}	/**	 * 根据整型日期生成Calendar	 * 	 * @param date	 * @return	 */	public static Calendar newCalendar(int date) {		int year = date / 10000;		int month = (date % 10000) / 100;		int day = date % 100;		Calendar ret = Calendar.getInstance();		ret.set(year, month - 1, day);		return ret;	}	/**	 * 取得Date型的当前日期	 * 	 * @return	 */	public static Date getNow() {		return new Date();	}	/**	 * 取得Date型的当前日期	 * 	 * @return	 */	public static Date getToday() {		return DateUtil.getDate(DateUtil.getIntToday());	}	/**	 * 整数型日期的加法	 * 	 * @param date	 * @param days	 * @return	 */	public static Integer intDateAdd(int date, int days) {		int year = date / 10000;		int month = (date % 10000) / 100;		int day = date % 100;		day += days;		return getIntDate(year, month, day);	}	/**	 * 整数型日期的减法	 * 	 * @param date	 * @param days	 * @return	 */	public static Integer intDateSub(int date, int days) {		return intDateAdd(date, -days);	}	/**	 * 计算两个整型日期之间的天数	 * 	 * @param startDate	 * @param endDate	 * @return	 */	public static Integer daysBetweenDate(Integer startDate, Integer endDate) {		if (startDate == null || endDate == null) {			return null;		}		Calendar c1 = newCalendar(startDate);		Calendar c2 = newCalendar(endDate);		Long lg = (c2.getTimeInMillis() - c1.getTimeInMillis()) / 1000 / 60				/ 60 / 24;		return lg.intValue();	}	/**	 * 计算两个整型日期之间的天数	 * 	 * @param startDate	 * @param endDate	 * @return	 */	public static Integer daysBetweenDate(Date startDate, Date endDate) {		if (startDate == null || endDate == null) {			return null;		}		Long interval = endDate.getTime() - startDate.getTime();		interval = interval / (24 * 60 * 60 * 1000);		return interval.intValue();	}	/**	 * 取得当前日期.	 * 	 * @return 当前日期,字符串类型.	 */	public static String getStringDate() {		return getStringDate(DateUtil.getNow());	}	/**	 * 根据calendar产生字符串型日期	 * 	 * @param d	 * @return eg:20080707	 */	public static String getStringDate(Date d) {		if (d == null) {			return "";		}		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");		return sdf.format(d);	}	public static String getFormatStringDate(Date d) {		if (d == null) {			return "";		}		SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日");		return sdf.format(d);	}	/**	 * 将当前日期转换为指定格式的字符串	 * 	 * @param pattern	 *            格式	 * @return String	 */	public static String getDateStringByPattern(String pattern) {		Date date = new Date();		return getDateStringByPattern(date, pattern);	}	/**	 * 将指定日期转换为指定格式的字符串	 * 	 * @param date	 *            ( java.util.Date )	 * @param pattern	 *            日期格式，如："yyyy-MM-dd" ，"yyyy-MM-dd HH:mm:ss"，"HH:mm:ss"	 * @return String	 */	public static String getDateStringByPattern(Date date, String pattern) {		if (date == null) {// 默认今天			date = new Date();		}		SimpleDateFormat sf = new SimpleDateFormat(pattern);		String str = sf.format(date);		return str;	}	/**	 * 日期累加	 * 	 * @param add	 *            可以是负数表示日期减少	 * @return	 */	public static Date getDateAddDay(int add) {		Calendar cal = Calendar.getInstance();		cal.add(Calendar.DATE, add);		return cal.getTime();	}	/**	 * 增加小时	 * 	 * @param add	 * @return	 */	public static Date getDateAddHour(int add) {		Calendar cal = Calendar.getInstance();		cal.add(Calendar.HOUR, add);		return cal.getTime();	}	/**	 * 增加时分秒	 * 	 * @param add	 * @return	 */	public static Date getDateAddHourMS(Date date, int a, int b, int c) {		Calendar cal = Calendar.getInstance();		cal.setTime(date);		cal.add(Calendar.HOUR, a);		cal.add(Calendar.MINUTE, b);		cal.add(Calendar.SECOND, c);		return cal.getTime();	}	/**	 * 	 * <p>	 * Title: parseDate	 * </p>	 * <p>	 * Description:TODO	 * </p>	 * 	 * @param strDate	 * @return	 * @author cuidd	 * @date 2013-8-1	 * @return Date	 * @version 1.0	 */	public static Date parseDate(String strDate) {		Date dtRet = null;		if (!StringUtils.isEmpty(strDate)				&& !StringUtils.isEmpty(DAFAULT_DATE_FORMAT)) {			ParsePosition pos = new ParsePosition(0);			SimpleDateFormat fmtDate = new SimpleDateFormat(DAFAULT_DATE_FORMAT);			try {				return dtRet = fmtDate.parse(strDate, pos);			} catch (Exception e) {				e.printStackTrace();			}		}		return dtRet;	}	/**	 * string to date	 * 	 * @param strDate	 * @param parrent	 * @return	 */	public static Date parseDate(String strDate, String parrent) {		Date dtRet = null;		if (!StringUtils.isEmpty(strDate) && !StringUtils.isEmpty(parrent)) {			ParsePosition pos = new ParsePosition(0);			SimpleDateFormat fmtDate = new SimpleDateFormat(parrent);			try {				return dtRet = fmtDate.parse(strDate, pos);			} catch (Exception e) {				e.printStackTrace();			}		}		return dtRet;	}	public static long getTimeInterval(String startDate, String endDate) {		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");		ParsePosition pos = new ParsePosition(0);		ParsePosition pos1 = new ParsePosition(0);		Date dt1 = formatter.parse(startDate, pos);		Date dt2 = formatter.parse(endDate, pos1);		long l = dt2.getTime() - dt1.getTime();		long date = l / (60 * 60 * 24 * 1000);		return date;	}			public static Date monthAdd(int num){		cal.setTime(new Date());		cal.set(Calendar.MONTH, cal.get(Calendar.MONTH)+num);		return cal.getTime();	}	public static String getNowStr(String format) {		SimpleDateFormat sdf = new SimpleDateFormat(format);		String now = sdf.format(new Date());		return now;	}	public static Date getFormatDate(String date, String format) {		SimpleDateFormat sdf = new SimpleDateFormat(format);		Date d = new Date();		try {			d = sdf.parse(date);		} catch (ParseException e) {			logger.error(e);		}		return d;	}	public static String getDateStr(Date date, String format) {		SimpleDateFormat sdf = new SimpleDateFormat(format);		String d = sdf.format(date);		return d;	}	public static String getPadZeroString(String s, int size) {		StringBuffer sb = new StringBuffer();		for (int i = 0; i < size - s.length(); i++) {			sb.append("0");		}		sb.append(s);		return sb.toString();	}	/**	 * 得到某月的天数	 * 	 * @param year	 * @param month	 * @return	 */	public static int getDayCountOfMonth(String year, String month) {		Calendar cal = Calendar.getInstance();		// 年		cal.set(Calendar.YEAR, Integer.parseInt(year));		// 月，因为Calendar里的月是从0开始，所以要-1		cal.set(Calendar.MONTH, Integer.parseInt(month) - 1);		return cal.getActualMaximum(Calendar.DAY_OF_MONTH);	}	public static String getYesterday(String format) {		SimpleDateFormat df = new SimpleDateFormat(format);		Calendar now = Calendar.getInstance();		now.roll(Calendar.DAY_OF_YEAR, -1);// 昨天		return df.format(now.getTime());	}	/**	 * 格式化时间	 * 	 * @param calendar	 * @return	 */	public static String format(Date d) {		if (d == null) {			return "";		}		timeFormat.applyPattern(TIME_FORMAT);		return timeFormat.format(d);	}	/**	 * 获取和今天附近的某天	 * 	 * @param format	 * @param diff	 * @return	 */	public static String getADay(String format, int diff) {		SimpleDateFormat df = new SimpleDateFormat(format);		Calendar now = Calendar.getInstance();		int beforeM = now.get(Calendar.MONTH);		now.roll(Calendar.DAY_OF_YEAR, diff);//		int nowM = now.get(Calendar.MONTH);		// 必须进行日期处理，否则2009-01-04日前七天是2009-12-28		if (nowM > beforeM) {			now.roll(Calendar.YEAR, -1);		}		return df.format(now.getTime());	}	public static String getTomorrow(String format) {		SimpleDateFormat df = new SimpleDateFormat(format);		Calendar now = Calendar.getInstance();		now.roll(Calendar.DAY_OF_YEAR, 1);// 明天		return df.format(now.getTime());	}	/**	 * 得到最近num天的全部日期 说明: 1.日期是从昨天开始算的. 2.如果num=2 , 日期是2008-03-14 ,则返回的结果为	 * 2008-03-12、2008-03-13	 * 	 * @param num	 * @return	 */	public static String[] getDaysByNum(int num, String date) {		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");		String[] result = {};		Calendar cal = Calendar.getInstance();		cal.setTime(getDateFromString(date, "yyyy-MM-dd"));		// 最近一周		result = new String[num];		for (int i = num; i > 0; i--) {			cal.add(Calendar.DAY_OF_YEAR, -1);			result[i - 1] = sdf.format(new Date(cal.getTimeInMillis()));		}		return result;	}	public static Date getDateFromString(String dateStr, String format) {		if (dateStr == null || format == null) {			try {				throw new Exception("数据类型异常" + dateStr + "|" + format);			} catch (Exception e) {				logger.error("数据类型异常:" + e);			}		}		SimpleDateFormat df = new SimpleDateFormat(format);		Date date;		try {			date = df.parse(dateStr);			return date;		} catch (Exception ex) {			logger.error(ex);			return new Date();		}	}	public static int getNowYear() {		Calendar cal = Calendar.getInstance();		return cal.get(Calendar.YEAR);	}	public static int getNowMonth() {		Calendar cal = Calendar.getInstance();		return cal.get(Calendar.MONTH) + 1;	}	public static String[] getMonthRang(String year, String month) {		String beginDate = year + "-" + month + "-01";		String endDate = year + "-" + month + "-"				+ getDayCountOfMonth(year, month);		return getDaysByRang(beginDate, endDate);	}	public static String[] getDaysByRang(String beginDate, String endDate) {		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");		// 得到两个日期间相差多少天		int num = dateDiff(beginDate, endDate);		if (num < 0) {			// 颠倒一下日期			String tmp = beginDate;			beginDate = endDate;			endDate = tmp;			num = 0 - num;		}		String[] result = {};		Calendar cal = Calendar.getInstance();		try {			cal.setTime(sdf.parse(beginDate));		} catch (ParseException e) {			e.printStackTrace();		}		num = num + 1; // 把开始和结束日期都包含进去		result = new String[num];		for (int i = 0; i < num; i++) {			if (i > 0)				cal.add(Calendar.DAY_OF_YEAR, 1);			result[i] = sdf.format(new Date(cal.getTimeInMillis()));		}		return result;	}	public static int dateDiff(String beginDate, String endDate) {		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");		Date date = null;		try {			date = sdf.parse(endDate);		} catch (ParseException e) {			date = new Date();			e.printStackTrace();		}		long end = date.getTime();		try {			date = sdf.parse(beginDate);		} catch (ParseException e) {			date = new Date();			e.printStackTrace();		}		long begin = date.getTime();		long day = (end - begin) / (1000 * 3600 * 24); // 除1000是把毫秒变成秒		return Integer.parseInt(Long.toString(day));	}	public static Timestamp getYearStart(Date d) {		Calendar c = Calendar.getInstance();		c.setTime(d);		c.set(Calendar.MONTH, 0);		c.set(Calendar.DAY_OF_YEAR, 1);		c.set(Calendar.HOUR_OF_DAY, 0);		c.set(Calendar.MINUTE, 0);		c.set(Calendar.SECOND, 0);		c.set(Calendar.MILLISECOND, 0);		return new Timestamp(c.getTimeInMillis());	}	public static Timestamp getYearEnd(Date d) {		Calendar c = Calendar.getInstance();		c.setTime(d);		c.set(Calendar.MONTH, 11);		c.set(Calendar.DAY_OF_MONTH, 31);		c.set(Calendar.HOUR_OF_DAY, 23);		c.set(Calendar.MINUTE, 59);		c.set(Calendar.SECOND, 59);		c.set(Calendar.MILLISECOND, 0);		return new Timestamp(c.getTimeInMillis());	}	public static Timestamp getMOnStart(Date d) {		Calendar c = Calendar.getInstance();		c.setTime(d);		c.set(Calendar.DAY_OF_MONTH, 1);		c.set(Calendar.HOUR_OF_DAY, 0);		c.set(Calendar.MINUTE, 0);		c.set(Calendar.SECOND, 0);		c.set(Calendar.MILLISECOND, 0);		return new Timestamp(c.getTimeInMillis());	}	public static int getCurrenntMonth() {		cal.setTime(new Date());		return cal.get(Calendar.MONTH) + 1;	}	public static Timestamp getMOnEnd(Date d) {		Calendar c = Calendar.getInstance();		c.setTime(d);		c.set(Calendar.DAY_OF_MONTH, 31);		c.set(Calendar.HOUR_OF_DAY, 23);		c.set(Calendar.MINUTE, 59);		c.set(Calendar.SECOND, 59);		c.set(Calendar.MILLISECOND, 0);		return new Timestamp(c.getTimeInMillis());	}	// 获得周一的日期	public static Date getMonday(Date date) {		Calendar c = Calendar.getInstance(Locale.CHINA);		c.setTime(date);		c.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);		c.set(Calendar.HOUR_OF_DAY, 0);		c.set(Calendar.MINUTE, 0);		c.set(Calendar.SECOND, 0);		c.set(Calendar.MILLISECOND, 0);		return new Date(c.getTimeInMillis());	}	public static Date getSunday(Date d) {		return after(getMonday(d), 6);	}	public static Date after(Date d, int squence) {		cal.setTime(d);		cal.set(Calendar.HOUR_OF_DAY, cal.get(Calendar.HOUR_OF_DAY) + squence				* 24);		return new Date(cal.getTimeInMillis());	}    	public static String getDateStrbysec(long millis,String partten){		 Calendar calendar = Calendar.getInstance();		 calendar.setTimeInMillis(millis);		 SimpleDateFormat sdf = new SimpleDateFormat(partten);		 return sdf.format(calendar.getTime());	}}