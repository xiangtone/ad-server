/** * <p>Title: AppStyleDaoImpl.java</p> * <p>Description: </p> * <p>Copyright: Copyright (c) </p> * <p>Company: adwalker</p> * @author jiangwei * @date Aug 22, 2012 * @version 1.0 */package cn.adwalker.model.ad.dao.impl;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Map;import org.apache.commons.lang.ArrayUtils;import org.springframework.jdbc.core.BeanPropertyRowMapper;import org.springframework.stereotype.Repository;import cn.adwalker.core.repository.impl.BaseDaoImpl;import cn.adwalker.model.ad.dao.IPlacementTypeRelDao;import cn.adwalker.model.ad.domain.PlacementTypeRel;import cn.adwalker.model.ad.domain.Type;/** * <p> * Title: AppStyleDaoImpl * </p> * <p> * Description: * </p> * <p> * Company: adwalker * </p> *  * @author jiangwei * @date Aug 22, 2012 */@Repository("placementTypeRelDao")public class PlacementTypeRelDaoImpl extends BaseDaoImpl<PlacementTypeRel> implements IPlacementTypeRelDao {	public PlacementTypeRelDaoImpl() {		setTableName("T_PLACEMENT_TYPE_REL");	}	/**	 * (non-Javadoc)	 * <p>	 * Title: getPageByAppId	 * </p>	 * 	 * @param app_id	 * @return	 * @see cn.adwalker.model.common.dao.IPageDao#getPageByAppId(java.lang.Long)	 */	@Override	public List<String> getPageByPlacementId(Long app_id) {		List<String> resultList = new ArrayList<String>();		StringBuffer sql = new StringBuffer();		sql.append(" select type.name name from T_PLACEMENT_TYPE_REL page  left join T_TYPE  type on page.type_id=type.id where  page.status>=0 and  page.app_id=?");		List<Map<String, Object>> list = jdbcTemplate.queryForList(sql.toString(), new Object[] { app_id });		for (Map<String, Object> map : list) {			resultList.add((String) map.get("name"));		}		return resultList;	}	/**	 * (non-Javadoc)	 * <p>	 * Title: saveOrUpdate	 * </p>	 * 	 * @param app_id	 * @param arr	 * @return	 * @see cn.adwalker.model.ad.dao.IPlacementTypeRelDao#saveOrUpdate(java.lang.Long, java.lang.String[])	 */	@Override	public int saveOrUpdate(Long app_id, String arr[]) {		if (app_id != null && arr != null && arr.length > 0) {			List<PlacementTypeRel> pageList = this.findByPlacement(app_id, null);			StringBuilder sql = new StringBuilder();			List<Object[]> parameters = new ArrayList<Object[]>();			if (pageList != null && pageList.size() > 0) {				for (PlacementTypeRel page : pageList) {					if (ArrayUtils.contains(arr, String.valueOf(page.getType_id()))) {						if (page.getStatus() != 1) {							parameters.add(new Object[] { 1, page.getId() });						}					} else {						parameters.add(new Object[] { -1, page.getId() });					}				}				sql.append("update T_PLACEMENT_TYPE_REL set STATUS=? where id=?");			} else {				String typeArr[] = new String[] { "0", "1", "4", "5" };				sql.append("insert into T_PLACEMENT_TYPE_REL (PLACEMENT_ID,").append("TYPE_ID,STATUS,CREATE_TIME)").append("values (?,?,?,?)");				for (String s : typeArr) {					Integer status = null;					if (ArrayUtils.contains(arr, s)) {						status = 1;					} else {						status = -1;					}					parameters.add(new Object[] { app_id, Integer.valueOf(s), status, new Date() });				}			}			jdbcTemplate.batchUpdate(sql.toString(), parameters);		}		return 0;	}	private List<PlacementTypeRel> findByPlacement(Long app_id, Integer type) {		List<PlacementTypeRel> list = null;		if (app_id != null) {			String sql = " select * from T_PLACEMENT_TYPE_REL  where placement_id = " + app_id;			if (type != null) {				sql = sql + " and status>0";			}			list = jdbcTemplate.query(sql, new BeanPropertyRowMapper<PlacementTypeRel>(PlacementTypeRel.class));		}		return list;	}	@Override	public List<PlacementTypeRel> findByPlacement(Long app_id) {		return this.findByPlacement(app_id, 1);	}	/**	 * (non-Javadoc)	 * <p>	 * Title: getTypeListByPlacement	 * </p>	 * 	 * @param placement_id	 * @return	 * @throws Exception	 * @see cn.adwalker.model.ad.dao.IPlacementTypeRelDao#getTypeListByPlacement(java.lang.Long)	 */	@SuppressWarnings("unchecked")	@Override	public List<Type> getTypeListByPlacement(Long placement_id) throws Exception {		List<Type> list = null;		if (placement_id != null) {			list = (List<Type>) super.findAll("select  t.* from T_PLACEMENT_TYPE_REL ad  LEFT JOIN T_TYPE t on  ad.type_id=t.id  where placement_id=" + placement_id + "  and ad.status>0", Type.class);		}		return list;	}}