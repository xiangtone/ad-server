package cn.adwalker.ad.controller;import java.io.IOException;import java.io.OutputStream;import java.util.Date;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import cn.adwalker.ad.logger.AdDetailInfoLogger;import cn.adwalker.ad.logger.AdDownLogLogger;import cn.adwalker.ad.logger.AdInfoLogger;import cn.adwalker.ad.logger.AdbannerAc4Logger;import cn.adwalker.ad.logger.DevAddScoreLogger;import cn.adwalker.ad.logger.InitDataLogger;import cn.adwalker.ad.logger.TypeInfoLogger;import cn.adwalker.ad.util.DateUtil;/** * <p> * Title:初始化 * </p> * <p> * Description:TODO * </p> * <p> * Company: adwalker * </p> *  * @author caiqiang * @date 2013-1-5 */@Controllerpublic class RefreshLog4jController {			private final static String APP_ID = "777";		private final static String WALL_TYPE = "0";		private final static String CATALOG_TYPE = "0";			private final static String PAY_TYPE = "CPA";		private final static String PRISE = "0";			private final static String AD_ID = "674";		private final static String CHANNEL_NUM = "sdk 3.0.0";		private final static String SDK_VERSION = "androidV3.0.0";		private final static String AREA_CODE = "全国";		private final static String IP = "127.0.0.1";		private final static String UUID = "1";	/**	 * 	* <p>Title: getInitData</p>	* <p>Description: 刷新日志</p>	* @param request	* @param response	* @return	* @author cuidd	* @date 2013-3-15	* @return String	* @version 1.0	* @throws	 */	@RequestMapping("/common/refreshLog4j.do")	public String refreshLog4j(HttpServletRequest request,			HttpServletResponse response) {		// 2013-03-11 18:15:48 247 sdk 3.0.0 68b406fe3e69707f68799a7afc175bdc		// androidV3.0.0 无锡 117.84.77.178		//初始化		InitDataLogger initDataLogger = new InitDataLogger();		initDataLogger.log(new String[] {				DateUtil.getDateStringByPattern(new Date(),						DateUtil.PARTTERN_DATE_TIME),				APP_ID, CHANNEL_NUM,				UUID,AREA_CODE, IP,SDK_VERSION });		// --用户安装软件列表		// InstallSoftListLogger installSoftListLogger = new		// InstallSoftListLogger();		// installSoftListLogger.log(new String[] { "", "" });		// 2013-03-11 18:04:46 364 4 bigpinwheel		// 0453ecbc09672ba7707b2f03704c6958 重庆 123.147.245.71 androidV3.1.0		//pospv		TypeInfoLogger typeInfoLogger = new TypeInfoLogger();		typeInfoLogger.log(new String[] {				DateUtil.getDateStringByPattern(new Date(),						DateUtil.PARTTERN_DATE_TIME),				APP_ID, WALL_TYPE,CHANNEL_NUM,				UUID, AREA_CODE,				IP, SDK_VERSION });		// 2013-03-11 18:02:07 348 4 hentica 704 1 CPC 0		// de99fec49182af5a3d18f71b1113fd2d 德阳 118.124.63.244 androidV3.0.0		//adpv		AdInfoLogger adInfoLogger = new AdInfoLogger();		adInfoLogger.log(new String[] {				DateUtil.getDateStringByPattern(new Date(),						DateUtil.PARTTERN_DATE_TIME),			APP_ID,WALL_TYPE,				CHANNEL_NUM,AD_ID,				CATALOG_TYPE,				PAY_TYPE, PRISE,				UUID, AREA_CODE,				IP, SDK_VERSION });		// --2013-03-11 18:47:46 281 5 dangle 696 6 CPD 0		// a1d6cc4630cd51994ba3c92d818e9f28 南京 118.74.116.165 androidV3.0.0		//点击		AdDetailInfoLogger adDetailInfoLogger = new AdDetailInfoLogger();		adDetailInfoLogger.log(new String[] {				DateUtil.getDateStringByPattern(new Date(),						DateUtil.PARTTERN_DATE_TIME),				APP_ID, WALL_TYPE,				CHANNEL_NUM,AD_ID,				CATALOG_TYPE,				PAY_TYPE, PRISE,			UUID, AREA_CODE,				IP, SDK_VERSION });		// 2013-03-06 01:52:34 208 1 sdk 3.0.0 562 1 CPD 0		// 406ade3d7772fb388b0100d441a75468 北京 124.205.200.99 androidV3.1.0		//二次点击		AdbannerAc4Logger clickd = new AdbannerAc4Logger();		clickd.log(new String[] {				DateUtil.getDateStringByPattern(new Date(),						DateUtil.PARTTERN_DATE_TIME),				APP_ID,WALL_TYPE,				CHANNEL_NUM, AD_ID,				CATALOG_TYPE,				PAY_TYPE, PRISE,				UUID, AREA_CODE,				IP, SDK_VERSION});				//下载		AdDownLogLogger adDownLogLogger = new AdDownLogLogger();		adDownLogLogger.log(new String[] {DateUtil.getDateStringByPattern(new Date(),						DateUtil.PARTTERN_DATE_TIME),				APP_ID, WALL_TYPE,				CHANNEL_NUM, AD_ID,				CATALOG_TYPE,				PAY_TYPE, PRISE,				UUID, AREA_CODE,				IP, SDK_VERSION});		//		// 2013-03-11 19:15:21 521 0 sdk 3.0.0 638 4 CPA 0.4		// c493018083aa10d6eec927eadb9c180f 阳江 androidV3.0.0 40.0		//jihuo		DevAddScoreLogger devAddScoreLogger = new DevAddScoreLogger();		devAddScoreLogger.log(new String[] {				DateUtil.getDateStringByPattern(new Date(),						DateUtil.PARTTERN_DATE_TIME),				APP_ID, WALL_TYPE,				CHANNEL_NUM, AD_ID,				CATALOG_TYPE,				PAY_TYPE, PRISE,				UUID, AREA_CODE,				IP, SDK_VERSION });		//		// ScoreConsumeLogger scoreConsumeLogger = new ScoreConsumeLogger();		// scoreConsumeLogger.log(new String[] { "", "" });				try {			OutputStream out = response.getOutputStream();			out.write("ok".getBytes("UTF-8"));			out.close();		} catch (IOException e) {			e.printStackTrace();		}		return null;	}}